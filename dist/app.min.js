function User(e){var n=e;this.getName=function(){return n}}function ChatApp(e,n){var t=e,s=n;this.init=function(){a(),i(),u()};var a=function(){var e=$('<input class="messageToSend" type="text" placeholder="Send message...">'),n=$('<input class="sendButton" type="submit" value="Send" disabled>'),a=$('<form onsubmit="return false">').append(e).append(n),i=$("<h2>"+t+" discute avec "+s+"</h2>"),p=$('<div class="chatWindow"></div>'),u=$("<section id="+t+">").append(i,p,a);$("#container").append(u)},i=function(){$("#"+t+" input.messageToSend").on("input",function(){var e=$("#"+t+" input.messageToSend").val();e&&0!==e.length?$("#"+t+" input.sendButton").prop("disabled",!1):$("#"+t+" input.sendButton").prop("disabled",!0)})},p=function(){function e(e){return 10>e?"0"+e:e}var n=new Date,t=e(n.getHours()),s=e(n.getMinutes()),a=e(n.getSeconds()),i="["+t+":"+s+":"+a+"]";return i},u=function(){$("#"+t+" input.sendButton").on("click",function(){function e(e){var n=$("#"+t+" input.messageToSend").val(),s=$('<span class="time">').text(p()+" "),a=$("<p>").append(s).append(e).append($('<span class="text">').text(n));return a}var n=$('<span class="sender">').text("<"+t+"> "),a=$('<span class="recipient">').text("<"+t+"> ");$("#"+t+" .chatWindow").append(e(n)),$("#"+s+" .chatWindow").append(e(a)),$("#"+t+" input.messageToSend").val(""),$("#"+t+" input.sendButton").prop("disabled",!0),$(".chatWindow").scrollTop($(".chatWindow")[0].scrollHeight)})}}user1=new User("User1"),user2=new User("User2"),user1Chat=new ChatApp(user1.getName(),user2.getName()),user2Chat=new ChatApp(user2.getName(),user1.getName()),user1Chat.init(),user2Chat.init();
//# sourceMappingURL=data:application/json;base64,
